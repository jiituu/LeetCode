class Solution(object):
    def numEnclaves(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m = len(grid)
        n = len(grid[0])
        
        # mark all boundary land cells and their connected cells
        for i in range(m):
            self.dfs(grid, i, 0)
            self.dfs(grid, i, n-1)
        for j in range(n):
            self.dfs(grid, 0, j)
            self.dfs(grid, m-1, j)
        
        # count unmarked land cells
        count = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    count += 1
        return count
    
    def dfs(self, grid, i, j):
        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != 1:
            return
        grid[i][j] = -1 # mark as visited
        self.dfs(grid, i+1, j)
        self.dfs(grid, i-1, j)
        self.dfs(grid, i, j+1)
        self.dfs(grid, i, j-1)
